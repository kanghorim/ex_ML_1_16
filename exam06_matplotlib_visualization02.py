# -*- coding: utf-8 -*-
"""exam06_matplotlib_visualization02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zw4iLL2ryTneOQ6At7lwRnm-FsnS9IHF
"""

import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns
plt.rcParams['figure.dpi'] = 60

point = 100
X = list(range(-50, 50))
X = list(map(lambda x: x / 10, X))
Y = list(map(np.sin, X))
# X = np.linspace(-5, 5, point)
# Y = 3 * X + 1
# Y = X * X + 2
fig = plt.figure(figsize=(5, 5))
ax = fig.add_axes([0, 0, 1, 1])
ax.plot(X, Y, '-', markerfacecolor='g', color='k', linewidth=2)
plt.axhline(color='k', linewidth=1)
plt.axvline(color='k', linewidth=1)
plt.show()

point = 50
X = np.linspace(-5, 5, point)
fig = plt.figure(figsize=(8, 5))
ax = fig.add_axes([0, 0, 1, 1])

n = 50
x = np.random.rand(n) * 10 - 5
y = np.random.rand(n) * 35 - 10
custom_colors = np.random.rand(n)
area = (30 * np.random.rand(n))**2
ax.scatter(x, y, s=area, c=custom_colors, alpha=0.5)

ax.plot(X, 2 * X + 3, 'rD',
        X, np.sin(X) * 10, 'b^', 
        X, X ** 2, 'gs')
plt.axhline(color='black', linewidth=1)
plt.axvline(color='black', linewidth=1)
plt.show()

import math
def sigmoid(x):
    sig = 1 / (1 + math.exp(-x))
    return sig

point = 100
X = np.linspace(-10, 10, point)
Y = list(map(sigmoid, X))

fig = plt.figure(figsize=(8, 5))
ax = fig.add_axes([0, 0, 1, 1])

np.random.seed(200)
N = 50
x = np.random.rand(n) * 20 - 10
y = np.random.rand(n) * 1.4 - 0.2
custom_colors = np.random.rand(n)
area = (30 * np.random.rand(n))**2
ax.scatter(x, y, s=area, c=custom_colors, alpha=0.5)

ax.plot(X, Y, color='r', linewidth=2)

ax.fill_between(X, list(map(lambda Y:Y+0.25, Y)),
                list(map(lambda Y:Y-0.25, Y)),
                facecolor='r', edgecolor='None', alpha=0.15)

plt.axhline(color='black', linewidth=1)
plt.axvline(c='k', linewidth=1)
ax.set_title('Sigmoid')
plt.show()

labels = 'Frogs', 'Hogs', 'Hogs', 'Logs'
sizes = [15, 30, 45, 10]
explode = (0, 0.1, 0, 0)
fig1, ax1 = plt.subplots()
wedges, texts, autotexts = ax1.pie(sizes, labels=labels, explode=explode,
        shadow=True, startangle=-90, autopct='%1.1f%%')
ax1.axis('equal')
# wedges[1].set(hatch='///', alpha=0.1)
# wedges[1].set_radius(1.1)
# wedges[3].set_theta1(90)
# wedges[3].set_theta2(100)
plt.show()

size = 0.3
vals1 = [40, 35, 25]
vals2 = [11, 29, 12, 23, 12, 13]

cmap = plt.get_cmap('tab20c')
outer_colors = cmap([0, 4, 12])
inner_colors = cmap([1, 2, 5, 6, 13, 14])

fig = plt.figure(figsize=(8, 5))
ax = fig.add_axes([0, 0, 1, 1])

ax.pie(vals1, radius=1, colors=outer_colors,
       labels=['male', 'female', 'pet'],
       autopct='%1.1f%%', pctdistance=0.83,
       textprops={'color':'black'}, 
       wedgeprops={'width':size, 'edgecolor':'w',
                   'linewidth':5},
       startangle=0,
       counterclock=True, rotatelabels=False)
ax.pie(vals2, radius=1-size, colors=inner_colors,
       autopct='%1.1f%%', pctdistance=0.8,
       textprops={'color':'w'}, 
       wedgeprops={'width':size, 'edgecolor':'w',
                   'linewidth':5},
       startangle=0,
       counterclock=True, rotatelabels=False)

plt.show()

cmap = 'PRGn'

fig = plt.figure(figsize=(8, 5))
ax = fig.add_axes([0, 0, 1, 1], 
            frameon=False, xticks=[], yticks=[])
Z = np.linspace(0, 1, 512).reshape(1, 512)

plt.imshow(Z, extent=[0, 30, 0, 5], cmap=plt.get_cmap(cmap))
plt.show()

color = {}
for name, hex_value in mpl.colors.cnames.items():
    print(name, hex_value)

# plt.style.use('Solarize_Light2')
plt.style.available

plt.colormaps()

cmaps = {}

gradient = np.linspace(0, 1, 256)
gradient = np.vstack((gradient, gradient))

def plot_color_gradients(category, cmap_list):
    nrows = len(cmap_list)
    figh = 0.35 + 0.15 + (nrows + (nrows -1) * 0.1) * 0.22
    fig, axs = plt.subplots(nrows=nrows + 1, figsize=(6.4, figh))
    fig.subplots_adjust(top=1-0.35/figh, bottom=0.15/figh,
                        left=0.2, right=0.99)
    axs[0].set_title(f'{category} colormaps', fontsize=14)

    for ax, name in zip(axs, cmap_list):
        ax.imshow(gradient, aspect='auto', cmap=plt.get_cmap(name))
        ax.text(-0.01, 0.5, name, va='center', ha='right', fontsize=10,
                transform=ax.transAxes)
        
    for ax in axs:
        ax.set_axis_off()
    cmaps[category] = cmap_list

plot_color_gradients('Perceptually Uniform Sequential',
                     ['viridis', 'plasma', 'inferno', 'magma', 'cividis'])

plot_color_gradients('Sequential',
            ['Greys', 'Purples', 'Blues', 'Greens',
            'Oranges', 'Reds', 'YlOrBr', 'YlOrRd',
            'OrRd', 'PuRd', 'RdPu', 'BuPu', 'GnBu', 
            'PuBu', 'YlGnBu', 'PuBuGn', 'BuGn', 'YlGn'])

plot_color_gradients('Sequential (2)',
        ['binary', 'gist_yarg', 'gist_gray', 'gray', 'bone',
        'pink', 'spring', 'summer', 'autumn', 'winter', 'cool',
        'Wistia', 'hot', 'afmhot', 'gist_heat', 'copper'])

plot_color_gradients('Diverging',
    ['PiYG', 'PRGn', 'BrBG', 'PuOr', 'RdGy', 'RdBu', 'RdYlBu',
    'RdYlGn', 'Spectral', 'coolwarm', 'bwr', 'seismic'])

plot_color_gradients('Cyclic', 
            ['twilight', 'twilight_shifted', 'hsv'])

plot_color_gradients('Qualitative',
        ['Pastel1', 'Pastel2', 'Paired', 'Accent', 'Dark2',
        'Set1', 'Set2', 'Set3', 'tab10', 'tab20', 'tab20b',
        'tab20c'])

plot_color_gradients('Miscellaneous',
        ['flag', 'prism', 'ocean', 'gist_earth', 'terrain',
        'gist_stern', 'gnuplot', 'gnuplot2', 'CMRmap',
        'cubehelix', 'brg', 'gist_rainbow', 'rainbow', 'jet',
        'nipy_spectral', 'gist_ncar'])

N = 10
X = list(range(N))
Y1 = np.random.uniform(1, 7, N)
Y2 = np.random.uniform(1, 7, N)



fig = plt.figure(figsize=(8, 5))
ax = fig.add_axes([0, 0, 1, 1])

ax.bar(X, Y1, 1, facecolor='#9999ff', edgecolor='w')
ax.bar(X, -Y2, 1, facecolor='#7777ff', edgecolor='w')
ax.set_title('Bar plot', fontdict={'fontsize':30})

plt.show()

N = 5
menMeans = (20, 35, 30, 35, -27)
womenMeans = (25, 32, 34, 20, -25)
menStd = (2, 3, 4, 1, 2)
womenStd = (3, 5, 2, 3, 3)
ind = np.arange(N)
width = 0.35

fig = plt.figure(figsize=(8, 5))
ax = fig.add_axes([0, 0, 1, 1])
p1 = ax.bar(ind, menMeans, width, yerr=menStd, label='Men')
p2 = ax.bar(ind, womenMeans, width, yerr=womenStd, label='Women',
            bottom=menMeans)
ax.axhline(0, color='gray', linewidth=0.8)
ax.set_ylabel('Scores')
ax.set_title('Scores by group and gender')
ax.legend()

plt.show()

width = 0.35

fig = plt.figure(figsize=(8, 5))
ax = fig.add_axes([0, 0, 1, 1])
p1 = ax.bar(ind - width/2, menMeans, 
            width, yerr=menStd, label='Men')
p2 = ax.bar(ind + width/2, womenMeans, 
            width, yerr=womenStd, label='Women')
ax.axhline(0, color='gray', linewidth=0.8)
ax.set_ylabel('Scores')
ax.set_title('Scores by group and gender')
ax.legend()

plt.show()

titanic = sns.load_dataset('titanic')
titanic_age = titanic[['age', 'survived']].dropna()
print(titanic_age.head())
print(titanic_age.info())
print(titanic_age.age.max())

def age_band(num):
    for i in range(1, 10):
        if num < 10 * i:
            return f'under {i*10}'
titanic_age['age_band'] = titanic_age['age'].apply(age_band)
print(titanic_age.head())

titanic_age = titanic_age[[
    'age_band', 'survived']].groupby('age_band')[
    'survived'].value_counts().sort_index().unstack().fillna(0)
titanic_age['Survival rate'] = \
    titanic_age[1] / (titanic_age[0] + titanic_age[1]) * 100
print(titanic_age)
print(type(titanic_age))

from matplotlib.ticker import FuncFormatter
fig, ax = plt.subplots(1, 2, figsize=(12, 5))
#bar1
ax[0].bar(titanic_age.index, 
          titanic_age['Survival rate'], 
          color='gray')
ax[0].set_title('Age Band & Survival Rate(Before)')

#bar2
with plt.xkcd(2):
    color_map = ['gray'] * 9
    color_map[0] = color_map[8] ='#3caea3'
    ax[1].bar(titanic_age.index, 
            titanic_age['Survival rate'], 
            color=color_map, edgecolor='black',
            linewidth=1.2, alpha=0.7
            )
    ax[1].set_title('Age Band & Survival Rate(After)', fontsize=15,
                    fontweight='bold', position=(0.5, 1.0+0.1))
    for i, rate in enumerate(titanic_age['Survival rate']):
        ax[1].annotate(f'{rate:.02f}%', xy=(i, rate+2),
                    va='center', ha='center', fontsize=10,
                    fontweight='bold', color='#383838')
    ax[1].yaxis.set_major_formatter(
        FuncFormatter(lambda y, _: f'{y:}%'))
    ax[1].set_xticklabels(titanic_age.index, rotation=40, size=10)
    plt.suptitle('* Focus on survival rates for young and old',
                x=0.72, y=0.9, color='gray')
plt.subplots_adjust(left=0.5, right=0.8)
plt.tight_layout()

plt.show()

titanic_embarked = titanic[['embarked', 'survived']].dropna()
titanic_embarked.info()
titanic_embarked = titanic_embarked.groupby(
    'embarked')['survived'].value_counts().sort_index()
type(titanic_embarked)
titanic_embarked

x_value = ['-'.join(map(str, i)) for i in titanic_embarked.index]
print(x_value)

fig, ax = plt.subplots(1, 1, figsize=(8, 5))
ax.bar(x_value, list(titanic_embarked), 
       color='#e0e0e0', width=0.52, edgecolor='black')
ax.set_xticklabels(['die', 'survived']*3)
custom_color = ['g', 'b', 'orange']
span_range = [[0, 1], [2, 3], [4, 5]]
for idx, sub_title in enumerate(
    ['Cherbourg', 'Queenstown', 'Southampton']):
    ax.axvspan(span_range[idx][0]-0.4, span_range[idx][1]+0.4,
               color=custom_color[idx], alpha=0.07, hatch='///')
    ax.annotate(sub_title,
                xy=(sum(span_range[idx])/2, 350),
                xytext=(0, 0), textcoords='offset points',
                va='center', ha='center',
                color='w', fontsize=16, fontweight='bold',
                bbox=dict(boxstyle='round4', pad=0.4,
                          color=custom_color[idx], alpha=0.6))

# plt.axhline(150, linewidth=8, color='seagreen')
# plt.axvline(x=1, linewidth=8, color='papayawhip')
# plt.axhspan(200, 300, facecolor='0.5', alpha=0.5)

plt.show()