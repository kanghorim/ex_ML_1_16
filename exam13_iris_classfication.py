# -*- coding: utf-8 -*-
"""exam13_iris_classfication.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fy6bU6z1tPOmkDcsFFbpFhxkDRyAPiPL
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris
from sklearn.preprocessing import OneHotEncoder
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.optimizers import Adam

iris = load_iris()
print(type(iris))
print('Data :', iris.data.shape)
print('Label :', iris.target.shape)
print('feature name :', iris.feature_names)
print(' target name', iris.target_names)
print('iris dataset keys\n', iris.keys())

x = iris.data
y = iris.target

encoder = OneHotEncoder(sparse=False)
y = y.reshape(-1, 1)
encoded_y = encoder.fit_transform(y)
print(encoded_y.shape)
print(encoded_y[50:55])
print(y[50:55])

X_train, X_test, Y_train, Y_test = train_test_split(
    x, encoded_y, test_size=0.2)
print(X_train.shape, Y_train.shape)
print(X_test.shape, Y_test.shape)

model = Sequential()
model.add(Dense(256, input_dim=4, activation='relu'))
model.add(Dense(128, activation='relu'))
model.add(Dense(512, activation='relu'))
model.add(Dense(3, activation='softmax'))

opt = Adam(lr=0.001)
model.compile(opt, loss='categorical_crossentropy',
              metrics=['accuracy'])
model.summary()

fit_hist = model.fit(X_train, Y_train, batch_size=5, 
                     epochs=30, verbose=1)

score = model.evaluate(X_test, Y_test, verbose=0)
print('Final test set accuracy :', score[1])

plt.plot(fit_hist.history['acc'])
plt.show()

my_sample = np.random.randint(30)
sample = X_test[my_sample]
print(sample)
sample = sample.reshape(-1, 4)
print(sample)
pred = model.predict(sample)
print('pred is :', pred)
print('actual is :', Y_test[my_sample])
print('Target :', 
      iris.target_names[np.argmax(Y_test[my_sample])])
print('Prediction after learning is :', 
      iris.target_names[np.argmax(pred)])